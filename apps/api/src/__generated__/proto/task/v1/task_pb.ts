// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file task/v1/task.proto (package task.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message task.v1.Task
 */
export class Task extends Message<Task> {
  /**
   * Required. The task's ID.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Required. The task's title.
   *
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * Required. The task's status.
   *
   * @generated from field: task.v1.Task.Status status = 3;
   */
  status = Task_Status.UNSPECIFIED;

  constructor(data?: PartialMessage<Task>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "task.v1.Task";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "status", kind: "enum", T: proto3.getEnumType(Task_Status) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Task {
    return new Task().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Task {
    return new Task().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Task {
    return new Task().fromJsonString(jsonString, options);
  }

  static equals(a: Task | PlainMessage<Task> | undefined, b: Task | PlainMessage<Task> | undefined): boolean {
    return proto3.util.equals(Task, a, b);
  }
}

/**
 * @generated from enum task.v1.Task.Status
 */
export enum Task_Status {
  /**
   * @generated from enum value: STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The task is open.
   *
   * @generated from enum value: STATUS_NOT_STARTED = 1;
   */
  NOT_STARTED = 1,

  /**
   * The task is done.
   *
   * @generated from enum value: STATUS_DONE = 2;
   */
  DONE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Task_Status)
proto3.util.setEnumType(Task_Status, "task.v1.Task.Status", [
  { no: 0, name: "STATUS_UNSPECIFIED" },
  { no: 1, name: "STATUS_NOT_STARTED" },
  { no: 2, name: "STATUS_DONE" },
]);

/**
 * @generated from message task.v1.ListTasksRequest
 */
export class ListTasksRequest extends Message<ListTasksRequest> {
  constructor(data?: PartialMessage<ListTasksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "task.v1.ListTasksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTasksRequest {
    return new ListTasksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTasksRequest {
    return new ListTasksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTasksRequest {
    return new ListTasksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTasksRequest | PlainMessage<ListTasksRequest> | undefined, b: ListTasksRequest | PlainMessage<ListTasksRequest> | undefined): boolean {
    return proto3.util.equals(ListTasksRequest, a, b);
  }
}

/**
 * @generated from message task.v1.ListTasksResponse
 */
export class ListTasksResponse extends Message<ListTasksResponse> {
  /**
   * Required. The list of tasks.
   *
   * @generated from field: repeated task.v1.Task tasks = 1;
   */
  tasks: Task[] = [];

  constructor(data?: PartialMessage<ListTasksResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "task.v1.ListTasksResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tasks", kind: "message", T: Task, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTasksResponse {
    return new ListTasksResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTasksResponse {
    return new ListTasksResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTasksResponse {
    return new ListTasksResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListTasksResponse | PlainMessage<ListTasksResponse> | undefined, b: ListTasksResponse | PlainMessage<ListTasksResponse> | undefined): boolean {
    return proto3.util.equals(ListTasksResponse, a, b);
  }
}

/**
 * @generated from message task.v1.CreateTaskRequest
 */
export class CreateTaskRequest extends Message<CreateTaskRequest> {
  /**
   * Required. The task's title.
   *
   * @generated from field: string title = 1;
   */
  title = "";

  constructor(data?: PartialMessage<CreateTaskRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "task.v1.CreateTaskRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTaskRequest {
    return new CreateTaskRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTaskRequest {
    return new CreateTaskRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTaskRequest {
    return new CreateTaskRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTaskRequest | PlainMessage<CreateTaskRequest> | undefined, b: CreateTaskRequest | PlainMessage<CreateTaskRequest> | undefined): boolean {
    return proto3.util.equals(CreateTaskRequest, a, b);
  }
}

/**
 * @generated from message task.v1.CreateTaskResponse
 */
export class CreateTaskResponse extends Message<CreateTaskResponse> {
  /**
   * Required. The created task.
   *
   * @generated from field: task.v1.Task task = 1;
   */
  task?: Task;

  constructor(data?: PartialMessage<CreateTaskResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "task.v1.CreateTaskResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task", kind: "message", T: Task },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTaskResponse {
    return new CreateTaskResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTaskResponse {
    return new CreateTaskResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTaskResponse {
    return new CreateTaskResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTaskResponse | PlainMessage<CreateTaskResponse> | undefined, b: CreateTaskResponse | PlainMessage<CreateTaskResponse> | undefined): boolean {
    return proto3.util.equals(CreateTaskResponse, a, b);
  }
}

/**
 * @generated from message task.v1.UpdateTaskStatusRequest
 */
export class UpdateTaskStatusRequest extends Message<UpdateTaskStatusRequest> {
  /**
   * Required. The task's ID.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Required. The task's new status.
   *
   * @generated from field: task.v1.Task.Status status = 2;
   */
  status = Task_Status.UNSPECIFIED;

  constructor(data?: PartialMessage<UpdateTaskStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "task.v1.UpdateTaskStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(Task_Status) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTaskStatusRequest {
    return new UpdateTaskStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTaskStatusRequest {
    return new UpdateTaskStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTaskStatusRequest {
    return new UpdateTaskStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTaskStatusRequest | PlainMessage<UpdateTaskStatusRequest> | undefined, b: UpdateTaskStatusRequest | PlainMessage<UpdateTaskStatusRequest> | undefined): boolean {
    return proto3.util.equals(UpdateTaskStatusRequest, a, b);
  }
}

/**
 * @generated from message task.v1.UpdateTaskStatusResponse
 */
export class UpdateTaskStatusResponse extends Message<UpdateTaskStatusResponse> {
  /**
   * Required. The updated task.
   *
   * @generated from field: task.v1.Task task = 1;
   */
  task?: Task;

  constructor(data?: PartialMessage<UpdateTaskStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "task.v1.UpdateTaskStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task", kind: "message", T: Task },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTaskStatusResponse {
    return new UpdateTaskStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTaskStatusResponse {
    return new UpdateTaskStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTaskStatusResponse {
    return new UpdateTaskStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTaskStatusResponse | PlainMessage<UpdateTaskStatusResponse> | undefined, b: UpdateTaskStatusResponse | PlainMessage<UpdateTaskStatusResponse> | undefined): boolean {
    return proto3.util.equals(UpdateTaskStatusResponse, a, b);
  }
}

/**
 * @generated from message task.v1.Database
 */
export class Database extends Message<Database> {
  /**
   * Required. The list of tasks.
   *
   * @generated from field: repeated task.v1.Task tasks = 1;
   */
  tasks: Task[] = [];

  constructor(data?: PartialMessage<Database>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "task.v1.Database";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tasks", kind: "message", T: Task, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Database {
    return new Database().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Database {
    return new Database().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Database {
    return new Database().fromJsonString(jsonString, options);
  }

  static equals(a: Database | PlainMessage<Database> | undefined, b: Database | PlainMessage<Database> | undefined): boolean {
    return proto3.util.equals(Database, a, b);
  }
}

